/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hostelmanagement.AfterLoginScreen.Notifications;

import com.mycompany.hostelmanagement.AdminAfterLoginScreen.AddDishesScreen.AddDishesScreen;
import com.mycompany.hostelmanagement.AfterLoginScreen.RoomSwapScreen.RoomSwapScreen;
import static com.mycompany.hostelmanagement.AfterLoginScreen.RoomSwapScreen.RoomSwapScreen.loginIdStatic;
import com.mycompany.hostelmanagement.DBConnection.DBConnection;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Jahnavi
 */
public class NotificationScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form NotificationScreen
     */
    
     public Connection connection =null; 
    private static final Logger logger = Logger.getLogger(NotificationScreen.class.getName());
     public static String loginIdStatic;
     
    public NotificationScreen(String loginId) {
        initComponents();
        loginIdStatic=loginId;
        connection = DBConnection.getConnection();
        DefaultComboBoxModel model = new DefaultComboBoxModel( fetchAllDishes() );
        dishSelectionBox.setModel( model );
    }
    
    
    
    public String[] fetchAllDishes(){
        ArrayList<String> arr = new ArrayList<>();
            try {
            PreparedStatement readFromDishesTable=connection.prepareStatement("select  * from  dishesTable");
            ResultSet resultSet = readFromDishesTable.executeQuery();
         
             while(resultSet.next()){
                arr.add(resultSet.getString(2));
            }
            Object[] objArr = arr.toArray();
            String str[] = new String[arr.size()];
            int i = 0; 
            for (Object obj : objArr) { 
                str[i++] = (String)obj; 
            } 
            return str;
  
        } catch (SQLException ex) {
            Logger.getLogger(AddDishesScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
            String str[] = new String[arr.size()];
           return str;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        dishSelectionBox = new javax.swing.JComboBox<>();
        voteButton = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        maxVotedDish = new javax.swing.JTextField();
        refreshDishVotes = new javax.swing.JButton();

        jTextField3.setText("jTextField3");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "Notification Messages "
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setEditable(false);
        jTextField1.setText("       Select Today's Dish");

        voteButton.setText("Vote  Today's Dish");
        voteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voteButtonActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setText("Maximum Voted  Dish");

        refreshDishVotes.setText("Refresh Votes");
        refreshDishVotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshDishVotesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(maxVotedDish, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(dishSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(refreshDishVotes, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(voteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dishSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(voteButton)
                    .addComponent(refreshDishVotes))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxVotedDish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voteButtonActionPerformed
        String dish = dishSelectionBox.getSelectedItem().toString();
         try {
             
             PreparedStatement readFromDishesTable=connection.prepareStatement("select * from dishVoters where profileId=?");
             readFromDishesTable.setString(1,loginIdStatic);
             ResultSet executeQuery = readFromDishesTable.executeQuery();
             logger.log(Level.INFO,"Fetched From Dish Votes Table");
             
             if(executeQuery.next()){
                 voteButton.setForeground(Color.red);
                 voteButton.setText("Already Voted");
                 throw new Exception();
             }
            
            PreparedStatement insertIntoDishesTable=connection.prepareStatement("update dishesTable set count=count+1 where dishName=?");
            insertIntoDishesTable.setString(1,dish);
            insertIntoDishesTable.executeUpdate();
            logger.log(Level.INFO,"Updated count in Dishes Table");
            
             PreparedStatement insertDishesVotersTable=connection.prepareStatement("insert into dishVoters(profileId) values(?)");
             insertDishesVotersTable.setString(1,loginIdStatic);
             insertDishesVotersTable.executeUpdate();
             logger.log(Level.INFO,"Updated count in Dishe voters Table");
            
        } catch (Exception ex) {
            Logger.getLogger(AddDishesScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_voteButtonActionPerformed

    private void refreshDishVotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshDishVotesActionPerformed
         try {
             PreparedStatement readFromDishesTable=connection.prepareStatement("select * from dishesTable order by count desc limit 1");
             ResultSet executeQuery = readFromDishesTable.executeQuery();
             if(executeQuery.next()){
                 maxVotedDish.setText(executeQuery.getString(2)+" ("+executeQuery.getString(3)+" votes)");
             }
             
             logger.log(Level.INFO,"Fetched votes from dishes Table");
         } catch (SQLException ex) {
             Logger.getLogger(NotificationScreen.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_refreshDishVotesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> dishSelectionBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField maxVotedDish;
    private javax.swing.JButton refreshDishVotes;
    private javax.swing.JButton voteButton;
    // End of variables declaration//GEN-END:variables
}
