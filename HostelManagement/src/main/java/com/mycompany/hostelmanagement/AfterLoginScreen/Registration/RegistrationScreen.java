/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hostelmanagement.AfterLoginScreen.Registration;

import static com.mycompany.hostelmanagement.AfterLoginScreen.AfterLoginScreen.loginIdStatic;
import com.mycompany.hostelmanagement.DBConnection.DBConnection;
import com.mycompany.hostelmanagement.SignUp.SignUpPage;
import java.awt.Color;
import java.awt.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jahnavi
 */
public class RegistrationScreen extends javax.swing.JInternalFrame {

    /**
     * Creates new form RegistrationScreen
     */
    public Connection connection =null;
    private static final Logger logger = Logger.getLogger(RegistrationScreen.class.getName());
    public static String loginIdStatic;
    public RegistrationScreen registrationScreen;
    public RegistrationScreen(String loginId) {
        initComponents();
        loginIdStatic = loginId;
        connection = DBConnection.getConnection();
        Refresh.doClick();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RoomScrollPane = new javax.swing.JScrollPane();
        tablePane = new javax.swing.JTable();
        roomSelect = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        registerButton = new javax.swing.JButton();
        Refresh = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RoomScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tablePane.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Floor", "Room Available"
            }
        ));
        tablePane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePanePropertyChange(evt);
            }
        });
        RoomScrollPane.setViewportView(tablePane);
        if (tablePane.getColumnModel().getColumnCount() > 0) {
            tablePane.getColumnModel().getColumn(0).setResizable(false);
            tablePane.getColumnModel().getColumn(1).setResizable(false);
        }

        getContentPane().add(RoomScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 12, 613, 239));

        roomSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomSelectActionPerformed(evt);
            }
        });
        getContentPane().add(roomSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 278, 111, -1));

        jTextField2.setEditable(false);
        jTextField2.setText("Select Room");
        jTextField2.setActionCommand("<Not Set>");
        jTextField2.setAlignmentX(5.0F);
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 278, 120, -1));

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(registerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 348, 409, -1));

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        getContentPane().add(Refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 277, 148, -1));

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(215, 8, 27));
        jTextField1.setText("Note: If fee not paid within 24 hrs, registration will be cancelled");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 480, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomSelectActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        try {
            // TODO add your handling code here:
            PreparedStatement readFromRegisterTable=connection.prepareStatement("select * from register where profileId1 is NULL or profileId2 is NULL");
            ResultSet resultSet = readFromRegisterTable.executeQuery();
            logger.log(Level.INFO, "Successfully read from register table");
            DefaultTableModel model = null;
            while(resultSet.next()){
                model = (DefaultTableModel) tablePane.getModel();
                model.addRow(new Object[]{resultSet.getString(5),resultSet.getString(2)});
                logger.log(Level.INFO, "Room Available {0}",resultSet.getString(2));
            }
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_RefreshActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
          try {
            // TODO add your handling code here:
            
         
            PreparedStatement readFromRegisterTable1=connection.prepareStatement("select roomNum from register where (profileId1=? or profileId2=?)");
            readFromRegisterTable1.setString(1, loginIdStatic);
            readFromRegisterTable1.setString(2, loginIdStatic);
           ResultSet resultSet1 = readFromRegisterTable1.executeQuery();
            
            logger.log(Level.INFO, "Test log for already present check");
            
            if(resultSet1.next()){
                String roomNumberAllocated = resultSet1.getString(1);
                registerButton.setForeground(Color.RED);
                registerButton.setText("Already Alloted room no. "+roomNumberAllocated);
                throw new Exception();
            }
            
            
            
            String roomNumber = roomSelect.getText();
            PreparedStatement readFromRegisterTable=connection.prepareStatement("select * from register where (profileId1 is NULL or profileId2 is NULL) and roomNum=?");
            readFromRegisterTable.setString(1, roomNumber);
           ResultSet resultSet = readFromRegisterTable.executeQuery();
            logger.log(Level.INFO, "Successfully read from register table");
            if(resultSet.next()){
                String profile1 = resultSet.getString(3);
                String profile2 = resultSet.getString(4);
                logger.log(Level.INFO, "Profile1 result: {0}",profile1);
                logger.log(Level.INFO, "Profile2 result: {0}",profile2);
                
                if(profile1==null){
                    PreparedStatement insertIntoRegisterTable=connection.prepareStatement("update register set profileId1=? where roomNum=?");
                    insertIntoRegisterTable.setString(1, loginIdStatic);
                    insertIntoRegisterTable.setString(2, roomNumber);
                    insertIntoRegisterTable.execute();
                    registerButton.setForeground(Color.GREEN);
                    registerButton.setText("Room allocated Successfully");
                    logger.log(Level.INFO,"Data updated Successfuly into register table 1st case for profileId {0}",loginIdStatic);
                    
                PreparedStatement insertIntoFeeTable=connection.prepareStatement("insert into feedetails(profileId,totalAmount,amountPaid,amountDue)"
                          + " values(?,?,?,?)");
                  insertIntoFeeTable.setString(1,loginIdStatic);
                  insertIntoFeeTable.setInt(2,70000);
                  insertIntoFeeTable.setInt(3,0);
                  insertIntoFeeTable.setInt(4,70000);
                  insertIntoFeeTable.executeUpdate();
                   logger.log(Level.INFO,"Entry created for fee details table for profileId {0}",loginIdStatic);
                }else if(profile2==null){
                    PreparedStatement insertIntoRegisterTable=connection.prepareStatement("update register set profileId2=? where roomNum=?");
                    insertIntoRegisterTable.setString(1, loginIdStatic);
                    insertIntoRegisterTable.setString(2, roomNumber);
                    insertIntoRegisterTable.execute();
                    registerButton.setForeground(Color.GREEN);
                    registerButton.setText("Room allocated Successfully");
                    logger.log(Level.INFO,"Data updated Successfuly into register table 2nd case for profileId {0}",loginIdStatic);
                    
                    
                PreparedStatement insertIntoFeeTable=connection.prepareStatement("insert into feedetails(profileId,totalAmount,amountPaid,amountDue)"
                          + " values(?,?,?,?)");
                  insertIntoFeeTable.setString(1,loginIdStatic);
                  insertIntoFeeTable.setInt(1,70000);
                  insertIntoFeeTable.setInt(2,0);
                  insertIntoFeeTable.setInt(3,70000);
                  insertIntoFeeTable.executeUpdate();
                   logger.log(Level.INFO,"Entry created for fee details table for profileId {0}",loginIdStatic);
                    
                }else{
                    registerButton.setForeground(Color.RED);
                    registerButton.setText("Room already booked in mean while");
                }
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(RegistrationScreen.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(RegistrationScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void tablePanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePanePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tablePanePropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Refresh;
    private javax.swing.JScrollPane RoomScrollPane;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextField roomSelect;
    private javax.swing.JTable tablePane;
    // End of variables declaration//GEN-END:variables
}
